<%- include('./partials/header', { title: 'Menu Management', currentPath: '/admin/menu', user: user, actionButtons: actionButtons }) %>

<div class="container-fluid px-0">
    <!-- Menu Items Table -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <div>
                <input type="text" id="menuSearch" class="form-control" placeholder="Search menu items...">
            </div>
            <div>
                <select id="categoryFilter" class="form-select">
                    <option value="">All Categories</option>
                </select>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle" id="menuTable">
                    <thead>
                        <tr>
                            <th scope="col" width="80">Image</th>
                            <th scope="col">Title</th>
                            <th scope="col">Category</th>
                            <th scope="col">Price</th>
                            <th scope="col">Status</th>
                            <th scope="col">Analytics</th>
                            <th scope="col" width="150">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="7" class="text-center py-4">Loading menu items...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1" aria-labelledby="addItemModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addItemModalLabel">Add New Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addItemForm" enctype="multipart/form-data">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="title" class="form-label">Title*</label>
                            <input type="text" class="form-control" id="title" name="title" required>
                        </div>
                        <div class="col-md-6">
                            <label for="category" class="form-label">Category*</label>
                            <input type="text" class="form-control" id="category" name="category" required 
                                   placeholder="e.g. Appetizers, Main Course, Desserts">
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="price" class="form-label">Price ($)*</label>
                            <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" required>
                        </div>
                        <div class="col-md-6">
                            <label for="status" class="form-label">Status*</label>
                            <select class="form-select" id="status" name="status" required>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                                <option value="featured">Featured</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="image" class="form-label">Image</label>
                        <input type="file" class="form-control" id="image" name="image" accept="image/*">
                        <small class="text-muted">Recommended size: 800x600 pixels, Max size: 2MB</small>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="is_vegetarian" name="is_vegetarian">
                            <label class="form-check-label" for="is_vegetarian">Vegetarian</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="is_gluten_free" name="is_gluten_free">
                            <label class="form-check-label" for="is_gluten_free">Gluten Free</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="is_spicy" name="is_spicy">
                            <label class="form-check-label" for="is_spicy">Spicy</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveItemBtn">Save Item</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Item Modal -->
<div class="modal fade" id="editItemModal" tabindex="-1" aria-labelledby="editItemModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editItemModalLabel">Edit Menu Item</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editItemForm" enctype="multipart/form-data">
                    <input type="hidden" id="edit_item_id" name="id">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="edit_title" class="form-label">Title*</label>
                            <input type="text" class="form-control" id="edit_title" name="title" required>
                        </div>
                        <div class="col-md-6">
                            <label for="edit_category" class="form-label">Category*</label>
                            <input type="text" class="form-control" id="edit_category" name="category" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="edit_price" class="form-label">Price ($)*</label>
                            <input type="number" class="form-control" id="edit_price" name="price" step="0.01" min="0" required>
                        </div>
                        <div class="col-md-6">
                            <label for="edit_status" class="form-label">Status*</label>
                            <select class="form-select" id="edit_status" name="status" required>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                                <option value="featured">Featured</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="edit_description" class="form-label">Description</label>
                        <textarea class="form-control" id="edit_description" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <div id="current_image_container" class="me-3">
                                <img id="current_image" src="" alt="Current Image" style="max-width: 100px; max-height: 100px;" class="img-thumbnail">
                            </div>
                            <div>Current Image</div>
                        </div>
                        <label for="edit_image" class="form-label">New Image (Leave empty to keep current image)</label>
                        <input type="file" class="form-control" id="edit_image" name="image" accept="image/*">
                        <small class="text-muted">Recommended size: 800x600 pixels, Max size: 2MB</small>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="edit_is_vegetarian" name="is_vegetarian">
                            <label class="form-check-label" for="edit_is_vegetarian">Vegetarian</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="edit_is_gluten_free" name="is_gluten_free">
                            <label class="form-check-label" for="edit_is_gluten_free">Gluten Free</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="edit_is_spicy" name="is_spicy">
                            <label class="form-check-label" for="edit_is_spicy">Spicy</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="updateItemBtn">Update Item</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <span id="deleteItemName" class="fw-bold"></span>? This action cannot be undone.</p>
                <input type="hidden" id="deleteItemId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete Item</button>
            </div>
        </div>
    </div>
</div>

<!-- Menu Management JavaScript -->
<script>
    // Get token from localStorage
    const token = localStorage.getItem('token');
    
    // Check if user is logged in
    if (!token) {
        window.location.href = '/admin';
    }
    
    // Helper function for API calls with authentication
    async function callApi(url, method = 'GET', data = null) {
        const options = {
            method,
            headers: {
                'Authorization': `Bearer ${token}`
            }
        };
        
        if (data) {
            if (data instanceof FormData) {
                options.body = data;
                // Don't set Content-Type for FormData, browser will set it with boundary
            } else {
                options.headers['Content-Type'] = 'application/json';
                options.body = JSON.stringify(data);
            }
        }
        
        const response = await fetch(url, options);
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'API request failed');
        }
        
        return await response.json();
    }
    
    // Format price as currency
    function formatCurrency(price) {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD'
        }).format(price);
    }
    
    // Load all menu items
    async function loadMenuItems() {
        try {
            const tableBody = document.querySelector('#menuTable tbody');
            tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4">Loading menu items...</td></tr>';
            
            const response = await callApi('/api/menu');
            const menuItems = response.data;
            
            if (menuItems.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4">No menu items found. Click "Add New Item" to create one.</td></tr>';
                return;
            }
            
            // Clear table and populate with menu items
            tableBody.innerHTML = '';
            
            // Build categories for filter
            const categories = new Set();
            
            menuItems.forEach(item => {
                if (item.category) {
                    categories.add(item.category);
                }
                
                const row = document.createElement('tr');
                
                // Create a status badge
                let statusBadge = '';
                if (item.status === 'active') {
                    statusBadge = '<span class="badge bg-success">Active</span>';
                } else if (item.status === 'inactive') {
                    statusBadge = '<span class="badge bg-secondary">Inactive</span>';
                } else if (item.status === 'featured') {
                    statusBadge = '<span class="badge bg-primary">Featured</span>';
                }
                
                // Format analytics data
                const analyticsHTML = `
                    <div class="small">
                        <i class="bi bi-eye me-1"></i> ${item.views || 0} views<br>
                        <i class="bi bi-cart me-1"></i> ${item.purchases || 0} orders<br>
                        <i class="bi bi-heart me-1"></i> ${item.likes || 0} likes
                    </div>
                `;
                
                row.innerHTML = `
                    <td>
                        <img src="${item.image_url || 'https://via.placeholder.com/80?text=No+Image'}" 
                             alt="${item.title}" width="60" height="60" class="rounded">
                    </td>
                    <td>
                        <div class="fw-medium">${item.title}</div>
                        <div class="small text-muted text-truncate" style="max-width: 200px;">${item.description || ''}</div>
                    </td>
                    <td>${item.category || 'Uncategorized'}</td>
                    <td>${formatCurrency(item.price)}</td>
                    <td>${statusBadge}</td>
                    <td>${analyticsHTML}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary me-1 edit-btn" data-id="${item.id}">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger delete-btn" data-id="${item.id}" data-name="${item.title}">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Update category filter
            const categoryFilter = document.getElementById('categoryFilter');
            categoryFilter.innerHTML = '<option value="">All Categories</option>';
            
            Array.from(categories).sort().forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categoryFilter.appendChild(option);
            });
            
            // Attach event listeners to edit and delete buttons
            attachActionButtonListeners();
            
        } catch (error) {
            console.error('Error loading menu items:', error);
            document.querySelector('#menuTable tbody').innerHTML = 
                `<tr><td colspan="7" class="text-center py-4 text-danger">Error loading menu items: ${error.message}</td></tr>`;
        }
    }
    
    // Attach event listeners to action buttons
    function attachActionButtonListeners() {
        // Edit buttons
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function() {
                const itemId = this.getAttribute('data-id');
                loadItemForEdit(itemId);
            });
        });
        
        // Delete buttons
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', function() {
                const itemId = this.getAttribute('data-id');
                const itemName = this.getAttribute('data-name');
                showDeleteConfirmation(itemId, itemName);
            });
        });
    }
    
    // Show delete confirmation modal
    function showDeleteConfirmation(itemId, itemName) {
        document.getElementById('deleteItemId').value = itemId;
        document.getElementById('deleteItemName').textContent = itemName;
        
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
        deleteModal.show();
    }
    
    // Load item details for editing
    async function loadItemForEdit(itemId) {
        try {
            const response = await callApi(`/api/menu/${itemId}`);
            const item = response.data;
            
            // Populate the edit form
            document.getElementById('edit_item_id').value = item.id;
            document.getElementById('edit_title').value = item.title;
            document.getElementById('edit_category').value = item.category || '';
            document.getElementById('edit_price').value = item.price;
            document.getElementById('edit_status').value = item.status || 'active';
            document.getElementById('edit_description').value = item.description || '';
            
            // Set checkboxes
            document.getElementById('edit_is_vegetarian').checked = item.is_vegetarian || false;
            document.getElementById('edit_is_gluten_free').checked = item.is_gluten_free || false;
            document.getElementById('edit_is_spicy').checked = item.is_spicy || false;
            
            // Show current image if exists
            const currentImageContainer = document.getElementById('current_image_container');
            const currentImage = document.getElementById('current_image');
            
            if (item.image_url) {
                currentImage.src = item.image_url;
                currentImageContainer.style.display = 'block';
            } else {
                currentImageContainer.style.display = 'none';
            }
            
            // Show the edit modal
            const editModal = new bootstrap.Modal(document.getElementById('editItemModal'));
            editModal.show();
            
        } catch (error) {
            console.error('Error loading item details:', error);
            alert(`Error loading item details: ${error.message}`);
        }
    }
    
    // Add a new menu item
    async function addMenuItem(formData) {
        try {
            const response = await callApi('/api/menu', 'POST', formData);
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addItemModal'));
            modal.hide();
            
            // Reset form
            document.getElementById('addItemForm').reset();
            
            // Reload menu items
            await loadMenuItems();
            
            // Show success message
            alert('Menu item added successfully!');
            
        } catch (error) {
            console.error('Error adding menu item:', error);
            alert(`Error adding menu item: ${error.message}`);
        }
    }
    
    // Update an existing menu item
    async function updateMenuItem(itemId, formData) {
        try {
            const response = await callApi(`/api/menu/${itemId}`, 'PUT', formData);
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('editItemModal'));
            modal.hide();
            
            // Reload menu items
            await loadMenuItems();
            
            // Show success message
            alert('Menu item updated successfully!');
            
        } catch (error) {
            console.error('Error updating menu item:', error);
            alert(`Error updating menu item: ${error.message}`);
        }
    }
    
    // Delete a menu item
    async function deleteMenuItem(itemId) {
        try {
            const response = await callApi(`/api/menu/${itemId}`, 'DELETE');
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal'));
            modal.hide();
            
            // Reload menu items
            await loadMenuItems();
            
            // Show success message
            alert('Menu item deleted successfully!');
            
        } catch (error) {
            console.error('Error deleting menu item:', error);
            alert(`Error deleting menu item: ${error.message}`);
        }
    }
    
    // Filter menu items by search term and category
    function filterMenuItems() {
        const searchTerm = document.getElementById('menuSearch').value.toLowerCase();
        const categoryFilter = document.getElementById('categoryFilter').value;
        const rows = document.querySelectorAll('#menuTable tbody tr');
        
        rows.forEach(row => {
            // Skip loading or empty state rows
            if (row.cells.length <= 1) return;
            
            const title = row.cells[1].textContent.toLowerCase();
            const category = row.cells[2].textContent;
            
            const matchesSearch = title.includes(searchTerm);
            const matchesCategory = categoryFilter === '' || category === categoryFilter;
            
            row.style.display = matchesSearch && matchesCategory ? '' : 'none';
        });
    }
    
    // Add event listeners once the DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
        // Load menu items on page load
        loadMenuItems();
        
        // Search filter
        document.getElementById('menuSearch').addEventListener('input', filterMenuItems);
        
        // Category filter
        document.getElementById('categoryFilter').addEventListener('change', filterMenuItems);
        
        // Save new item button
        document.getElementById('saveItemBtn').addEventListener('click', function() {
            const form = document.getElementById('addItemForm');
            if (form.checkValidity()) {
                const formData = new FormData(form);
                addMenuItem(formData);
            } else {
                form.reportValidity();
            }
        });
        
        // Update item button
        document.getElementById('updateItemBtn').addEventListener('click', function() {
            const form = document.getElementById('editItemForm');
            if (form.checkValidity()) {
                const itemId = document.getElementById('edit_item_id').value;
                const formData = new FormData(form);
                updateMenuItem(itemId, formData);
            } else {
                form.reportValidity();
            }
        });
        
        // Confirm delete button
        document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
            const itemId = document.getElementById('deleteItemId').value;
            deleteMenuItem(itemId);
        });
    });
</script>

<%- include('./partials/menu-scripts') %>
<%- include('./partials/footer') %>
